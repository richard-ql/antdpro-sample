"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var format_1 = __importDefault(require("./format"));
var react_1 = require("react");
var createMatchMediaPolyfill = function (matches, media) { return ({
    matches: matches,
    media: media,
    addListener: function () { },
    removeListener: function () { },
}); };
var createMatchMedia = function (props, ref, prevRef) {
    var defaultMatches = props.defaultMatches || false;
    var query = props.query || '';
    var targetWindow = props.targetWindow || window;
    var warn = 
    // tslint:disable-next-line no-console
    ['production', 'test'].includes(process && process.env.NODE_ENV) && console && console.warn;
    prevRef.current = ref.current;
    if (typeof targetWindow !== 'object') {
        // tslint:disable-next-line no-unused-expression
        warn && warn("[UseMedia] Invalid `targetWindow`");
    }
    else if (typeof targetWindow.matchMedia !== 'function') {
        // tslint:disable-next-line no-unused-expression
        warn && warn("[UseMedia] Current `targetWindow` doesn't support `matchMedia` API.");
    }
    else {
        return (ref.current = targetWindow.matchMedia(format_1.default(query))) && void 0;
    }
    ref.current = createMatchMediaPolyfill(defaultMatches, format_1.default(query));
};
var useMediaStorage = new Map();
var useMedia = function (initialProps) {
    if (initialProps === void 0) { initialProps = {}; }
    var listenRef = react_1.useRef(false);
    var setPropsRef = react_1.useRef();
    var mediaQueryListRef = react_1.useRef(void 0);
    var prevMediaQueryListRef = react_1.useRef(mediaQueryListRef.current);
    var useMediaPropsRef = react_1.useRef(Object.assign({}, initialProps));
    react_1.useState(function () {
        createMatchMedia(useMediaPropsRef.current, mediaQueryListRef, prevMediaQueryListRef);
        useMediaPropsRef.current.defaultMatches = mediaQueryListRef.current.matches;
        setPropsRef.current = function (nextProps) {
            if (nextProps === void 0) { nextProps = {}; }
            if (typeof nextProps === 'function')
                useMediaPropsRef.current = nextProps(useMediaPropsRef.current) || {};
            else
                useMediaPropsRef.current = nextProps;
            createMatchMedia(useMediaPropsRef.current, mediaQueryListRef, prevMediaQueryListRef);
            setMatches(mediaQueryListRef.current.matches);
        };
    });
    var _a = react_1.useState(useMediaPropsRef.current.defaultMatches), matches = _a[0], setMatches = _a[1];
    var eventListener = function () {
        if (!listenRef.current || useMediaPropsRef.current.paused)
            return;
        if (useMediaPropsRef.current.onChange) {
            if (useMediaPropsRef.current.onChange(mediaQueryListRef.current.matches))
                return;
        }
        setMatches(mediaQueryListRef.current.matches);
    };
    react_1.useEffect(function () {
        if (prevMediaQueryListRef.current) {
            prevMediaQueryListRef.current.removeListener(eventListener);
        }
        listenRef.current = true;
        mediaQueryListRef.current.addListener(eventListener);
        return function () {
            listenRef.current = false;
            mediaQueryListRef.current.removeListener(eventListener);
        };
    }, [mediaQueryListRef.current]);
    react_1.useMemo(function () {
        useMediaStorage.set(useMediaPropsRef.current.id, [matches, setPropsRef.current]);
    }, [matches]);
    return [matches, setPropsRef.current];
};
exports.default = useMedia;
exports.getUseMedia = function (id) { return useMediaStorage.get(id); };
