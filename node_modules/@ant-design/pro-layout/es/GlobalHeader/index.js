import "antd/lib/icon/style";
import _Icon from "antd/lib/icon";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import './index.less';
import React, { Component } from 'react';
import debounce from 'lodash/debounce';
import { defaultRenderLogo } from '../SiderMenu/SiderMenu';

var GlobalHeader =
/*#__PURE__*/
function (_Component) {
  _inherits(GlobalHeader, _Component);

  function GlobalHeader() {
    var _this;

    _classCallCheck(this, GlobalHeader);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GlobalHeader).apply(this, arguments));
    _this.triggerResizeEvent = debounce(function () {
      var event = document.createEvent('HTMLEvents');
      event.initEvent('resize', true, false);
      window.dispatchEvent(event);
    });

    _this.toggle = function () {
      var _this$props = _this.props,
          collapsed = _this$props.collapsed,
          onCollapse = _this$props.onCollapse;
      if (onCollapse) onCollapse(!collapsed);

      _this.triggerResizeEvent();
    };

    return _this;
  }

  _createClass(GlobalHeader, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.triggerResizeEvent.cancel();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          collapsed = _this$props2.collapsed,
          isMobile = _this$props2.isMobile,
          logo = _this$props2.logo,
          rightContentRender = _this$props2.rightContentRender;
      return React.createElement("div", {
        className: "ant-pro-global-header"
      }, isMobile && React.createElement("a", {
        className: "ant-pro-global-header-logo",
        key: "logo"
      }, defaultRenderLogo(logo)), React.createElement("span", {
        className: "ant-pro-global-header-trigger",
        onClick: this.toggle
      }, React.createElement(_Icon, {
        type: collapsed ? 'menu-unfold' : 'menu-fold'
      })), rightContentRender && rightContentRender(this.props));
    }
  }]);

  return GlobalHeader;
}(Component);

export { GlobalHeader as default };